# 📦 Containers, Docker & Kubernetes – Summary

This section covers the evolution of computing from classic physical servers to virtualization and containerization, leading up to orchestration with Docker and Kubernetes.

---

## 🖥️ From Physical Servers to Virtual Machines

- **Classic server computing** involves costly hardware, capital/recurring expenses, and underutilized resources.
- **Challenges** include licensing, maintenance, scalability, and resource constraints.

---

## 🧮 Virtualization

- Virtual Machines (VMs) mimic physical computers.
- Types: **System VMs** and **Process VMs**, isolated via a **hypervisor** (Type 1: bare-metal, Type 2: hosted).
- **Pros**: Cost-effective, scalable, flexible.
- **Cons**: VM sprawl, complex design, licensing, and security risks.

---

## 📦 Containers & Docker

- Containers virtualize **only the OS layer**, not the full system, making them **lightweight and fast**.
- **Benefits**: Platform independence, faster delivery, resource sharing.
- **Challenges**: Data management, disaster recovery, evolving tools, skill requirements.

---

## ⚙️ Orchestration & Standards

- **Docker**: Container engine and tools (Docker CLI, Docker Build, etc.).
- **Kubernetes**: Container orchestration tool (scaling, self-healing).
- **Alternatives**: Podman, Buildah, Kaniko.
- **Open Container Initiative (OCI)** promotes standardization for flexibility and reliability.

---

## 📌 Next Steps

- Deep dive into Docker CLI commands
- Explore Kubernetes architecture and deployment strategies
